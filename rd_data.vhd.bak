----------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
USE ieee.std_logic_arith.ALL;
USE ieee.std_logic_signed.ALL;
--USE IEEE.std_logic_unsigned.All; error:Error (10621): VHDL Use Clause error at conv.vhd(55): 
--more than one Use Clause imports a declaration of simple name ""="" -- none of the declarations are directly visible

entity rd_data is
	port(
	clk:in std_logic;
	rst_n:in std_logic;
	weight_ready:in std_logic;
	pool_ready:in std_logic;
	gobal_ready:in std_logic;
	layer:in std_logic_vector(3 DOWNTO 0);
	cnn_finish:out std_logic; --识别完成信号
	result:out std_logic_vector(3 downto 0);--识别结果
	layer_done:out std_logic;
	pool_reload:out std_logic;
	----------------------test--------------------------
	w_pre_ready_test:out std_logic;
	group1_en_test:out std_logic;
	group2_en_test:out std_logic;
	group3_en_test:out std_logic;
	once_finish_test:out std_logic;
	conv_maxpool_finish_test:out std_logic;
	channel_done_test:out std_logic;
	load_ready_test:out std_logic;
	wr_en_ain_test, wr_en_bin_test, wr_en_cin_test, wr_en_din_test, wr_en_aout1_test, wr_en_bout1_test:out std_logic;
	wr_en_cout1_test, wr_en_dout1_test,wr_en_aout2_test, wr_en_bout2_test, wr_en_cout2_test, wr_en_dout2_test:out std_logic;
	wr_data_a_test:out std_logic_vector(7 downto 0);
	wr_addr_test, rd_addr_test:out std_logic_vector(9 downto 0);
	q_out_a_test, q_out_b_test, q_out_c_test, q_out_d_test, data_out_test:out std_logic_vector(7 downto 0);
	w1_test, w2_test, w35_test, w36_test:out std_logic_vector(1 downto 0);
	w_start_addr_test:out std_logic_vector(11 downto 0);
	pix_start_addr_test:out std_logic_vector(9 downto 0);
	conv_stop_test:out std_logic;
	pool_stop_test:out std_logic;
	rd_en_conv_test:out std_logic;
	count_test:out std_logic_vector(9 downto 0);
	is_onetofour_test:out std_logic
	---------------------------------------------------
	);
end entity;

architecture structure of rd_data is


COMPONENT rom_weight
	port(
	clk:in std_logic;
	rst_n:in std_logic;
	load_ready:in std_logic;
	w_start_addr:in std_logic_vector(11 DOWNTO 0);
	w1, w2 ,w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18:out std_logic_vector(1 DOWNTO 0);
	w19, w20 ,w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36:out std_logic_vector(1 DOWNTO 0);
	w_pre_ready:out std_logic
	);
end COMPONENT;

COMPONENT rd_control
	port(
	clk:in std_logic;
	rst_n:in std_logic;
	w_pre_ready:in std_logic;
	pool_ready:in std_logic;
	gobal_ready:in std_logic;
	layer:in std_logic_vector(3 DOWNTO 0);
	pix_start_addr:in std_logic_vector(9 DOWNTO 0);
	rd_addr:out std_logic_vector(9 DOWNTO 0);
	group1_en, group2_en, group3_en:out std_logic;
	position_out:out std_logic_vector(3 DOWNTO 0);
	conv_over:out std_logic;
	maxpool_over:out std_logic;
	pool_start:out std_logic;
	conv_stop:out std_logic;
	rd_en_conv_test:out std_logic
	);
end COMPONENT;

COMPONENT ram_data
	port(
	clk:in std_logic;
	layer:in std_logic_vector(3 DOWNTO 0);
	rd_addr:in std_logic_vector(9 DOWNTO 0);
	group1_en, group2_en, group3_en:in std_logic;
	q_out_a, q_out_b, q_out_c, q_out_d:out std_logic_vector(7 DOWNTO 0);
	wr_en_ain,wr_en_bin,wr_en_cin,wr_en_din:in std_logic;
	wr_en_aout1,wr_en_bout1,wr_en_cout1,wr_en_dout1:in std_logic;
	wr_en_aout2,wr_en_bout2,wr_en_cout2,wr_en_dout2:in std_logic;
	wr_addr:in std_logic_vector(9 DOWNTO 0);
	wr_data_a, wr_data_b, wr_data_c, wr_data_d:in  std_logic_vector (7 downto 0)
	);
end COMPONENT;


COMPONENT conv_maxpool
	port(
	clk:in std_logic;
	rst_n:in std_logic;
	conv_stop:in std_logic;
	maxpool_over:in std_logic;
	pool_start:in std_logic;
	position:in std_logic_vector(3 DOWNTO 0);
	q_out_a:in std_logic_vector(7 DOWNTO 0);
	q_out_b:in std_logic_vector(7 DOWNTO 0);
	q_out_c:in std_logic_vector(7 DOWNTO 0);
	q_out_d:in std_logic_vector(7 DOWNTO 0);
	w1, w2 ,w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18:in std_logic_vector(1 DOWNTO 0);
	w19, w20 ,w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36:in std_logic_vector(1 DOWNTO 0);
	conv_over:in std_logic;
	layer:in std_logic_vector(3 DOWNTO 0);
	data_out:out std_logic_vector(7 downto 0);
	data_out1:out std_logic_vector(7 downto 0);
	data_out2:out std_logic_vector(7 downto 0);
	data_out3:out std_logic_vector(7 downto 0);
	data_out4:out std_logic_vector(7 downto 0);
	finish:out std_logic;
	once_finish:out std_logic;
	
	is_size7:in std_logic; --7*7 or 14*14
	is_onetofour:in std_logic --是前四个通道还是后四个通道
	);
end COMPONENT;

COMPONENT wr_control
	port(
	clk:in std_logic;
	rst_n:in std_logic;
	finish:in std_logic;
	layer:in std_logic_vector(3 DOWNTO 0);
	data_out:in std_logic_vector(7 downto 0);
	data_out1, data_out2, data_out3, data_out4:in std_logic_vector(7 downto 0);
	wr_addr:out std_logic_vector(9 DOWNTO 0);
	wr_data_a, wr_data_b, wr_data_c, wr_data_d:out  std_logic_vector (7 downto 0);
	wr_en_ain,wr_en_bin,wr_en_cin,wr_en_din:out std_logic;
	wr_en_aout1,wr_en_bout1,wr_en_cout1,wr_en_dout1:out std_logic;
	wr_en_aout2,wr_en_bout2,wr_en_cout2,wr_en_dout2:out std_logic;
	layer_done:out std_logic;
	channel_done:out std_logic
	);
end COMPONENT;

COMPONENT full_connect
	port(
		clk:in std_logic;
		rst_n:in std_logic;
		data_en:in std_logic;  --输入数据ready
		data1,data2,data3,data4:in std_logic_vector(7 downto 0); --并行输入的四个数据
		cnn_finish:out std_logic; --识别完成信号
		result:out std_logic_vector(3 downto 0)--识别结果
	);
end COMPONENT;

COMPONENT addr_init
	port(
		clk:in std_logic;
		rst_n:in std_logic;
		layer:in std_logic_vector(3 downto 0);
		once_finish:in std_logic; 
		weight_en:out std_logic;
		w_start_addr:out std_logic_vector(11 downto 0);
		pix_start_addr:out std_logic_vector(9 downto 0);
		is_onetofour:out std_logic; --是前四个通道还是后四个通道
		pool_reload:out std_logic;
		count_test:out std_logic_vector(9 downto 0)
	);
end COMPONENT;

signal group1_en, group2_en, group3_en:std_logic;
signal rd_addr:std_logic_vector(9 DOWNTO 0);
signal q_out_a, q_out_b, q_out_c, q_out_d:std_logic_vector(7 DOWNTO 0);
signal w1, w2 ,w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18:std_logic_vector(1 DOWNTO 0);
signal w19, w20 ,w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36:std_logic_vector(1 DOWNTO 0);
signal w_pre_ready, pool_start, data_ready, data_buffer:std_logic;
signal position_out:std_logic_vector(3 DOWNTO 0);
signal conv_over:std_logic;
signal data_out, data_out1, data_out2, data_out3, data_out4:std_logic_vector(7 downto 0);
signal data1, data2, data3, data4:std_logic_vector(7 downto 0);
signal conv_maxpool_finish, gobal_finish, conv_stop:std_logic;
--signal start_wr_addr:std_logic_vector(9 DOWNTO 0);
signal wr_addr:std_logic_vector(9 DOWNTO 0);
signal wr_data_a, wr_data_b, wr_data_c, wr_data_d:std_logic_vector (7 downto 0);
signal wr_en_ain,wr_en_bin,wr_en_cin,wr_en_din, wr_en_aout1,wr_en_bout1,wr_en_cout1,wr_en_dout1, wr_en_aout2,wr_en_bout2,wr_en_cout2,wr_en_dout2:std_logic;
signal once_finish, weight_en, is_onetofour,is_size7, load_ready, ready1:std_logic;
signal w_start_addr:std_logic_vector(11 downto 0);
signal pix_start_addr:std_logic_vector(9 downto 0);
--------------------------------test-----------------------
--signal wr_en_ain_test, wr_en_bin_test, wr_en_cin_test, wr_en_din_test, wr_en_aout1_test, wr_en_bout1_test:std_logic;
--signal wr_en_cout1_test, wr_en_dout1_test,wr_en_aout2_test, wr_en_bout2_test, wr_en_cout2_test, wr_en_dout2_test:std_logic;
--signal wr_data_test:std_logic_vector(7 downto 0);
--signal wr_addr_test, rd_addr_test:std_logic_vector(9 downto 0);
--signal q_out_a_test, q_out_b_test, q_out_b_test, q_out_d_test, data_out_test, data_out1_test, data_out2_test, data_out3_test, data_out4_test:std_logic_vector(7 downto 0);
--signal w1_test, w1_test, w35_test, w36_test:std_logic_vector(1 downto 0);
--signal w_start_addr_test:std_logic_vector(11 downto 0);
--signal pix_start_addr_test:std_logic_vector(7 downto 0);
-----------------
signal maxpool_over, channel_done:std_logic;
begin
U0:rom_weight
	port map(clk, rst_n, load_ready, w_start_addr, w1, w2 ,w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18,
	 w19, w20 ,w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w_pre_ready);
U1:rd_control
	port map(clk, rst_n, w_pre_ready, pool_ready, gobal_ready,layer, pix_start_addr, 
	rd_addr, group1_en, group2_en, group3_en, position_out, conv_over, maxpool_over, pool_start, conv_stop,rd_en_conv_test);
U2:ram_data
	port map(clk, layer, rd_addr, group1_en, group2_en, group3_en, q_out_a, q_out_b, q_out_c, q_out_d,
	wr_en_ain,wr_en_bin,wr_en_cin,wr_en_din, wr_en_aout1,wr_en_bout1,wr_en_cout1,wr_en_dout1, wr_en_aout2,wr_en_bout2,wr_en_cout2,wr_en_dout2,
	 wr_addr, wr_data_a, wr_data_b, wr_data_c, wr_data_d);
U3:conv_maxpool
	port map(clk, rst_n, conv_stop, maxpool_over, data_ready, position_out, q_out_a, q_out_b, q_out_c, q_out_d, w1, w2 ,w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18,
	 w19, w20 ,w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, conv_over, layer, data_out, data_out1, data_out2, data_out3, data_out4,
	 conv_maxpool_finish, once_finish, is_size7, is_onetofour);
U4:wr_control
	port map(clk, rst_n, conv_maxpool_finish, layer, data_out, data_out1, data_out2, data_out3, data_out4, 
	wr_addr, wr_data_a, wr_data_b, wr_data_c, wr_data_d, wr_en_ain, wr_en_bin, wr_en_cin, wr_en_din, wr_en_aout1, wr_en_bout1, wr_en_cout1, wr_en_dout1, 
	wr_en_aout2, wr_en_bout2, wr_en_cout2, wr_en_dout2, layer_done, channel_done);
U5:full_connect
	port map(clk, rst_n, gobal_finish, data1, data2, data3, data4, cnn_finish, result);
U6:addr_init
	port map(clk, rst_n, layer, once_finish, weight_en, w_start_addr, pix_start_addr, is_onetofour, pool_reload,count_test);
	
process(clk)
begin
if rst_n='0' then
	load_ready <= '0';
elsif rising_edge(clk) then
	if(weight_en='1')or(weight_ready='1') then
		load_ready <= '1';
	else load_ready <='0';
end if;
end if;
end process;

is_size7 <= '1' when layer="0111" else '0';
load_ready_test <= load_ready;
-------------test---------
w_pre_ready_test <= w_pre_ready;
group1_en_test <= group1_en;
group2_en_test <= group2_en;
group3_en_test <= group3_en;
once_finish_test <= once_finish;
conv_maxpool_finish_test <= conv_maxpool_finish;
channel_done_test <= channel_done;

wr_data_a_test <= wr_data_a;
wr_addr_test <= wr_addr;
wr_en_ain_test <= wr_en_ain;
wr_en_bin_test <= wr_en_bin;
wr_en_cin_test <= wr_en_cin;
wr_en_din_test <= wr_en_din;
wr_en_aout1_test <= wr_en_aout1;
wr_en_bout1_test <= wr_en_bout1;
wr_en_cout1_test <= wr_en_cout1;
wr_en_dout1_test <= wr_en_dout1;
wr_en_aout2_test <= wr_en_aout2;
wr_en_bout2_test <= wr_en_bout2;
wr_en_cout2_test <= wr_en_cout2;
wr_en_dout2_test <= wr_en_dout2;
rd_addr_test <= rd_addr;
q_out_a_test <= q_out_a;
q_out_b_test <= q_out_b;
q_out_c_test <= q_out_c;
q_out_d_test <= q_out_d;
data_out_test <= data_out;
--data_out1_test <= data_out1;
--data_out2_test <= data_out2;
--data_out3_test <= data_out3;
--data_out4_test <= data_out4;
w1_test <= w1;
w2_test <= w2;
w35_test <= w35;
w36_test <= w36;
w_start_addr_test <= w_start_addr;
pix_start_addr_test <= pix_start_addr;
pool_stop_test<=maxpool_over;
conv_stop_test<=conv_stop;
is_onetofour_test <=is_onetofour;

----------------------------
process(layer, conv_maxpool_finish, data_out1, data_out2, data_out3, data_out4)
begin
if(layer="1000") then
	gobal_finish <= conv_maxpool_finish;
	data1 <= data_out1;
	data2 <= data_out2;
	data3 <= data_out3;
	data4 <= data_out4;
else gobal_finish <= '0';
	 data1 <= (others=>'0');
	 data2 <= (others=>'0');
	 data3 <= (others=>'0');
	 data4 <= (others=>'0');
end if;
end process;
	
process(pool_start)
begin
if(pool_start='1') then
	data_buffer <= '1';
else data_buffer <='0';
end if;
end process;
	 
process(data_buffer)
begin
if(data_buffer='1') then
	ready1 <= '1';
else ready1 <='0';
end if;
end process;

process(clk)
begin
	if(rising_edge(clk))then
		data_ready<=ready1;
	end if;
end process;


end structure;


