--dcfifo_mixed_widths CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 DEVICE_FAMILY="Cyclone IV E" IGNORE_CARRY_BUFFERS="OFF" LPM_NUMWORDS=1024 LPM_SHOWAHEAD="OFF" LPM_WIDTH=16 LPM_WIDTH_R=16 LPM_WIDTHU=10 LPM_WIDTHU_R=10 OVERFLOW_CHECKING="ON" RDSYNC_DELAYPIPE=3 READ_ACLR_SYNCH="OFF" UNDERFLOW_CHECKING="ON" USE_EAB="ON" WRITE_ACLR_SYNCH="OFF" WRSYNC_DELAYPIPE=3 aclr data q rdclk rdreq rdusedw wrclk wrreq CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="Cyclone IV E" LOW_POWER_MODE="AUTO" ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
--VERSION_BEGIN 18.0 cbx_a_gray2bin 2018:04:24:18:04:18:SJ cbx_a_graycounter 2018:04:24:18:04:18:SJ cbx_altdpram 2018:04:24:18:04:18:SJ cbx_altera_counter 2018:04:24:18:04:18:SJ cbx_altera_gray_counter 2018:04:24:18:04:18:SJ cbx_altera_syncram 2018:04:24:18:04:18:SJ cbx_altera_syncram_nd_impl 2018:04:24:18:04:18:SJ cbx_altsyncram 2018:04:24:18:04:18:SJ cbx_cycloneii 2018:04:24:18:04:18:SJ cbx_dcfifo 2018:04:24:18:04:18:SJ cbx_fifo_common 2018:04:24:18:04:18:SJ cbx_lpm_add_sub 2018:04:24:18:04:18:SJ cbx_lpm_compare 2018:04:24:18:04:18:SJ cbx_lpm_counter 2018:04:24:18:04:18:SJ cbx_lpm_decode 2018:04:24:18:04:18:SJ cbx_lpm_mux 2018:04:24:18:04:18:SJ cbx_mgl 2018:04:24:18:08:49:SJ cbx_nadder 2018:04:24:18:04:18:SJ cbx_scfifo 2018:04:24:18:04:18:SJ cbx_stratix 2018:04:24:18:04:18:SJ cbx_stratixii 2018:04:24:18:04:18:SJ cbx_stratixiii 2018:04:24:18:04:18:SJ cbx_stratixv 2018:04:24:18:04:18:SJ cbx_util_mgl 2018:04:24:18:04:18:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION a_gray2bin_7ib (gray[10..0])
RETURNS ( bin[10..0]);
FUNCTION a_graycounter_677 (aclr, clock, cnt_en)
RETURNS ( q[10..0]);
FUNCTION a_graycounter_2lc (aclr, clock, cnt_en)
RETURNS ( q[10..0]);
FUNCTION altsyncram_8271 (aclr1, address_a[9..0], address_b[9..0], addressstall_b, clock0, clock1, clocken1, data_a[15..0], wren_a)
RETURNS ( q_b[15..0]);
FUNCTION dffpipe_pe9 (clock, clrn, d[10..0])
RETURNS ( q[10..0]);
FUNCTION alt_synch_pipe_vd8 (clock, clrn, d[10..0])
RETURNS ( q[10..0]);
FUNCTION cmpr_c66 (dataa[5..0], datab[5..0])
RETURNS ( aeb);
FUNCTION cmpr_b66 (dataa[4..0], datab[4..0])
RETURNS ( aeb);
FUNCTION mux_j28 (data[1..0], sel[0..0])
RETURNS ( result[0..0]);

--synthesis_resources = lut 16 M9K 2 reg 111 
OPTIONS ALTERA_INTERNAL_OPTION = "AUTO_SHIFT_REGISTER_RECOGNITION=OFF;REMOVE_DUPLICATE_REGISTERS=OFF;SYNCHRONIZER_IDENTIFICATION=OFF;SYNCHRONIZATION_REGISTER_CHAIN_LENGTH = 1;suppress_da_rule_internal=d101;suppress_da_rule_internal=d102;suppress_da_rule_internal=d103;{-to rdemp_eq_comp_lsb_aeb} POWER_UP_LEVEL=HIGH;{-to rdemp_eq_comp_msb_aeb} POWER_UP_LEVEL=HIGH;{-to wrptr_g} suppress_da_rule_internal=S102;{-to wrptr_g} POWER_UP_LEVEL=LOW;-name CUT ON -from delayed_wrptr_g -to rs_dgwp|dffpipe_qe9:dffpipe11|dffe12a;-name SDC_STATEMENT ""set_false_path -from *delayed_wrptr_g* -to *rs_dgwp|dffpipe_qe9:dffpipe11|dffe12a* """;

SUBDESIGN dcfifo_ilj1
( 
	aclr	:	input;
	data[15..0]	:	input;
	q[15..0]	:	output;
	rdclk	:	input;
	rdreq	:	input;
	rdusedw[9..0]	:	output;
	wrclk	:	input;
	wrreq	:	input;
) 
VARIABLE 
	rdptr_g_gray2bin : a_gray2bin_7ib;
	rs_dgwp_gray2bin : a_gray2bin_7ib;
	rdptr_g1p : a_graycounter_677;
	wrptr_g1p : a_graycounter_2lc;
	fifo_ram : altsyncram_8271;
	delayed_wrptr_g[10..0] : dffe;
	rdemp_eq_comp_lsb_aeb : dffe
		WITH (
			power_up = "high"
		);
	rdemp_eq_comp_msb_aeb : dffe
		WITH (
			power_up = "high"
		);
	rdptr_g[10..0] : dffe;
	wrfull_eq_comp_lsb_mux_reg : dffe;
	wrfull_eq_comp_msb_mux_reg : dffe;
	wrptr_g[10..0] : dffe
		WITH (
			power_up = "low"
		);
	rs_brp : dffpipe_pe9;
	rs_bwp : dffpipe_pe9;
	rs_dgwp : alt_synch_pipe_vd8;
	ws_dgrp : alt_synch_pipe_vd8;
	rdusedw_sub_dataa[10..0]	:	WIRE;
	rdusedw_sub_datab[10..0]	:	WIRE;
	rdusedw_sub_result[10..0]	:	WIRE;
	rdempty_eq_comp1_lsb : cmpr_c66;
	rdempty_eq_comp1_msb : cmpr_b66;
	rdempty_eq_comp_lsb : cmpr_c66;
	rdempty_eq_comp_msb : cmpr_b66;
	wrfull_eq_comp1_lsb : cmpr_c66;
	wrfull_eq_comp1_msb : cmpr_b66;
	wrfull_eq_comp_lsb : cmpr_c66;
	wrfull_eq_comp_msb : cmpr_b66;
	rdemp_eq_comp_lsb_mux : mux_j28;
	rdemp_eq_comp_msb_mux : mux_j28;
	wrfull_eq_comp_lsb_mux : mux_j28;
	wrfull_eq_comp_msb_mux : mux_j28;
	int_rdempty	: WIRE;
	int_wrfull	: WIRE;
	ram_address_a[9..0]	: WIRE;
	ram_address_b[9..0]	: WIRE;
	valid_rdreq	: WIRE;
	valid_wrreq	: WIRE;
	wrptr_g1s[10..0]	: WIRE;
	wrptr_gs[10..0]	: WIRE;

BEGIN 
	rdptr_g_gray2bin.gray[10..0] = rdptr_g[10..0].q;
	rs_dgwp_gray2bin.gray[10..0] = rs_dgwp.q[10..0];
	rdptr_g1p.aclr = aclr;
	rdptr_g1p.clock = rdclk;
	rdptr_g1p.cnt_en = valid_rdreq;
	wrptr_g1p.aclr = aclr;
	wrptr_g1p.clock = wrclk;
	wrptr_g1p.cnt_en = valid_wrreq;
	fifo_ram.aclr1 = aclr;
	fifo_ram.address_a[] = ram_address_a[];
	fifo_ram.address_b[] = ram_address_b[];
	fifo_ram.addressstall_b = (! valid_rdreq);
	fifo_ram.clock0 = wrclk;
	fifo_ram.clock1 = rdclk;
	fifo_ram.clocken1 = valid_rdreq;
	fifo_ram.data_a[] = data[];
	fifo_ram.wren_a = valid_wrreq;
	delayed_wrptr_g[].clk = wrclk;
	delayed_wrptr_g[].clrn = (! aclr);
	delayed_wrptr_g[].d = wrptr_g[].q;
	rdemp_eq_comp_lsb_aeb.clk = rdclk;
	rdemp_eq_comp_lsb_aeb.d = rdemp_eq_comp_lsb_mux.result[];
	rdemp_eq_comp_lsb_aeb.prn = (! aclr);
	rdemp_eq_comp_msb_aeb.clk = rdclk;
	rdemp_eq_comp_msb_aeb.d = rdemp_eq_comp_msb_mux.result[];
	rdemp_eq_comp_msb_aeb.prn = (! aclr);
	rdptr_g[].clk = rdclk;
	rdptr_g[].clrn = (! aclr);
	rdptr_g[].d = rdptr_g1p.q[];
	rdptr_g[].ena = valid_rdreq;
	wrfull_eq_comp_lsb_mux_reg.clk = wrclk;
	wrfull_eq_comp_lsb_mux_reg.clrn = (! aclr);
	wrfull_eq_comp_lsb_mux_reg.d = wrfull_eq_comp_lsb_mux.result[];
	wrfull_eq_comp_msb_mux_reg.clk = wrclk;
	wrfull_eq_comp_msb_mux_reg.clrn = (! aclr);
	wrfull_eq_comp_msb_mux_reg.d = wrfull_eq_comp_msb_mux.result[];
	wrptr_g[].clk = wrclk;
	wrptr_g[].clrn = (! aclr);
	wrptr_g[].d = wrptr_g1p.q[];
	wrptr_g[].ena = valid_wrreq;
	rs_brp.clock = rdclk;
	rs_brp.clrn = (! aclr);
	rs_brp.d[] = rdptr_g_gray2bin.bin[];
	rs_bwp.clock = rdclk;
	rs_bwp.clrn = (! aclr);
	rs_bwp.d[] = rs_dgwp_gray2bin.bin[];
	rs_dgwp.clock = rdclk;
	rs_dgwp.clrn = (! aclr);
	rs_dgwp.d[] = delayed_wrptr_g[].q;
	ws_dgrp.clock = wrclk;
	ws_dgrp.clrn = (! aclr);
	ws_dgrp.d[] = rdptr_g[].q;
	rdusedw_sub_result[] = rdusedw_sub_dataa[] - rdusedw_sub_datab[];
	rdusedw_sub_dataa[] = rs_bwp.q[];
	rdusedw_sub_datab[] = rs_brp.q[];
	rdempty_eq_comp1_lsb.dataa[5..0] = delayed_wrptr_g[5..0].q;
	rdempty_eq_comp1_lsb.datab[5..0] = rdptr_g1p.q[5..0];
	rdempty_eq_comp1_msb.dataa[4..0] = delayed_wrptr_g[10..6].q;
	rdempty_eq_comp1_msb.datab[4..0] = rdptr_g1p.q[10..6];
	rdempty_eq_comp_lsb.dataa[5..0] = delayed_wrptr_g[5..0].q;
	rdempty_eq_comp_lsb.datab[5..0] = rdptr_g[5..0].q;
	rdempty_eq_comp_msb.dataa[4..0] = delayed_wrptr_g[10..6].q;
	rdempty_eq_comp_msb.datab[4..0] = rdptr_g[10..6].q;
	wrfull_eq_comp1_lsb.dataa[5..0] = rdptr_g[5..0].q;
	wrfull_eq_comp1_lsb.datab[5..0] = wrptr_g1s[5..0];
	wrfull_eq_comp1_msb.dataa[4..0] = rdptr_g[10..6].q;
	wrfull_eq_comp1_msb.datab[4..0] = wrptr_g1s[10..6];
	wrfull_eq_comp_lsb.dataa[5..0] = rdptr_g[5..0].q;
	wrfull_eq_comp_lsb.datab[5..0] = wrptr_gs[5..0];
	wrfull_eq_comp_msb.dataa[4..0] = rdptr_g[10..6].q;
	wrfull_eq_comp_msb.datab[4..0] = wrptr_gs[10..6];
	rdemp_eq_comp_lsb_mux.data[] = ( rdempty_eq_comp1_lsb.aeb, rdempty_eq_comp_lsb.aeb);
	rdemp_eq_comp_lsb_mux.sel[] = valid_rdreq;
	rdemp_eq_comp_msb_mux.data[] = ( rdempty_eq_comp1_msb.aeb, rdempty_eq_comp_msb.aeb);
	rdemp_eq_comp_msb_mux.sel[] = valid_rdreq;
	wrfull_eq_comp_lsb_mux.data[] = ( wrfull_eq_comp1_lsb.aeb, wrfull_eq_comp_lsb.aeb);
	wrfull_eq_comp_lsb_mux.sel[] = valid_wrreq;
	wrfull_eq_comp_msb_mux.data[] = ( wrfull_eq_comp1_msb.aeb, wrfull_eq_comp_msb.aeb);
	wrfull_eq_comp_msb_mux.sel[] = valid_wrreq;
	int_rdempty = (rdemp_eq_comp_lsb_aeb.q & rdemp_eq_comp_msb_aeb.q);
	int_wrfull = (wrfull_eq_comp_lsb_mux_reg.q & wrfull_eq_comp_msb_mux_reg.q);
	q[] = fifo_ram.q_b[];
	ram_address_a[] = ( (wrptr_g[10..10].q $ wrptr_g[9..9].q), wrptr_g[8..0].q);
	ram_address_b[] = ( (rdptr_g1p.q[10..10] $ rdptr_g1p.q[9..9]), rdptr_g1p.q[8..0]);
	rdusedw[] = ( rdusedw_sub_result[9..0]);
	valid_rdreq = (rdreq & (! int_rdempty));
	valid_wrreq = (wrreq & (! int_wrfull));
	wrptr_g1s[] = ( (! wrptr_g1p.q[10..10]), (! wrptr_g1p.q[9..9]), wrptr_g1p.q[8..0]);
	wrptr_gs[] = ( (! wrptr_g[10..10].q), (! wrptr_g[9..9].q), wrptr_g[8..0].q);
END;
--VALID FILE
