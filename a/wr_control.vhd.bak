library ieee;
use ieee.std_logic_1164.all;
USE ieee.std_logic_arith.ALL;
USE ieee.std_logic_signed.ALL;
--USE IEEE.std_logic_unsigned.All; error:Error (10621): VHDL Use Clause error at conv.vhd(55): 
--more than one Use Clause imports a declaration of simple name ""="" -- none of the declarations are directly visible


entity wr_control is
	port(
	clk:in std_logic;
	rst_n:in std_logic;
	finish:in std_logic;
	layer:in std_logic_vector(3 DOWNTO 0);
	data_out:in std_logic_vector(7 downto 0);
	data_out1, data_out2, data_out3, data_out4:in std_logic_vector(7 downto 0);
	wr_addr:out std_logic_vector(9 DOWNTO 0);
	wr_data:out  std_logic_vector (7 downto 0);
	wr_en_ain,wr_en_bin,wr_en_cin,wr_en_din:out std_logic;
	wr_en_aout1,wr_en_bout1,wr_en_cout1,wr_en_dout1:out std_logic;
	wr_en_aout2,wr_en_bout2,wr_en_cout2,wr_en_dout2:out std_logic;
	layer_done:out std_logic
	);
end entity;

architecture behav of wr_control is
signal times:std_logic_vector(2 downto 0):="000";
signal rel_addr:std_logic_vector(9 downto 0):="0000000000";
signal wr_en_group1:std_logic;
signal wr_en_group2:std_logic;
signal wr_en_group3:std_logic;
signal current_channel:std_logic_vector(3 downto 0):="0000";
signal data:std_logic_vector (7 downto 0);
signal matrix2_out:std_logic_vector(9 DOWNTO 0);
signal out_channel:std_logic_vector(3 DOWNTO 0);
signal start_wr_addr:std_logic_vector(9 DOWNTO 0);
begin
PROCESS(clk)
begin
if rst_n='0' then
	wr_en_group1 <= '0';
	wr_en_group2 <= '0';
	wr_en_group3 <= '0';
elsif(rising_edge(clk))then
	if finish='1' then
		case(layer) is
			when "0001"|"0100"|"0111" => wr_en_group2 <= '1';wr_en_group1 <= '0';wr_en_group3 <= '0';
			when "0010"|"0101" => wr_en_group3 <= '1';wr_en_group1 <= '0';wr_en_group2 <= '0';
			when "0011"|"0110" => wr_en_group1 <= '1';wr_en_group2 <= '0';wr_en_group3 <= '0';
			when others=>wr_en_group1 <= '0';wr_en_group2 <= '0';wr_en_group3 <= '0';
		end case;
	else wr_en_group1 <= '0';wr_en_group2 <= '0';wr_en_group3 <= '0';
	end if;
end if;
end process;

PROCESS(clk)
begin
if rst_n='0' then
	times <= "000";
elsif(rising_edge(clk))then
	if (wr_en_group2='1')or(wr_en_group1='1') then
		times <= "100";
	elsif times/="000" then
		times <= times - '1';
	end if;
end if;
end process;

PROCESS(layer, times, current_channel, rst_n,clk)
begin
if rst_n='0' then
	wr_en_aout1 <= '0';wr_en_aout2 <= '0';wr_en_ain <= '0';
	wr_en_bout1 <= '0';wr_en_bout2 <= '0';wr_en_bin <= '0';
	wr_en_cout1 <= '0';wr_en_cout2 <= '0';wr_en_cin <= '0';
	wr_en_dout1 <= '0';wr_en_dout2 <= '0';wr_en_din <= '0';
elsif(rising_edge(clk))then
case(layer) is
when "0001" =>
	case(times) is
		when "100" => data <= data_out1 ; wr_en_aout1 <= '1';wr_en_bout1 <= '0';wr_en_cout1 <= '0';wr_en_dout1 <= '0';
		when "011" => data <= data_out2 ; wr_en_bout1 <= '1';wr_en_aout1 <= '0';wr_en_cout1 <= '0';wr_en_dout1 <= '0';
		when "010" => data <= data_out3 ; wr_en_cout1 <= '1';wr_en_bout1 <= '0';wr_en_aout1 <= '0';wr_en_dout1 <= '0';
		when "001" => data <= data_out4 ; wr_en_dout1 <= '1';wr_en_bout1 <= '0';wr_en_cout1 <= '0';wr_en_aout1 <= '0';
		when others => data <= (others=>'0') ;
					   wr_en_aout1 <= '0';wr_en_bout1 <= '0';wr_en_cout1 <= '0';wr_en_dout1 <= '0';
	end case;
when "0011"|"0110"=>
	case(times) is
		when "100" => data <= data_out1 ; wr_en_ain <= '1';wr_en_bin <= '0';wr_en_cin <= '0';wr_en_din <= '0';
		when "011" => data <= data_out2 ; wr_en_bin <= '1';wr_en_ain <= '0';wr_en_cin <= '0';wr_en_din <= '0';
		when "010" => data <= data_out3 ; wr_en_cin <= '1';wr_en_bin <= '0';wr_en_ain <= '0';wr_en_din <= '0';
		when "001" => data <= data_out4 ; wr_en_din <= '1';wr_en_bin <= '0';wr_en_cin <= '0';wr_en_ain <= '0';
		when others => data <= (others=>'0') ;
					   wr_en_ain <= '0';wr_en_bin <= '0';wr_en_cin <= '0';wr_en_din <= '0';
	end case;
when "0010"|"0100"|"0101"|"0111" =>
	case(current_channel) is
		when "0000"|"0100"|"1000"|"1100" => data <= data_out ; wr_en_aout2 <= wr_en_group3;wr_en_aout1 <= wr_en_group2;
							wr_en_bout1 <= '0';wr_en_bout2 <= '0';wr_en_bin <= '0';wr_en_ain <= '0';
							wr_en_cout1 <= '0';wr_en_cout2 <= '0';wr_en_cin <= '0';
							wr_en_dout1 <= '0';wr_en_dout2 <= '0';wr_en_din <= '0';
		when "0001"|"0101"|"1001"|"1101" => data <= data_out ; wr_en_bout2 <= wr_en_group3;wr_en_bout1 <= wr_en_group2;
							wr_en_aout1 <= '0';wr_en_aout2 <= '0';wr_en_ain <= '0';wr_en_bin <= '0';
							wr_en_cout1 <= '0';wr_en_cout2 <= '0';wr_en_cin <= '0';
							wr_en_dout1 <= '0';wr_en_dout2 <= '0';wr_en_din <= '0';
		when "0010"|"0110"|"1010"|"1110" => data <= data_out ; wr_en_cout2 <= wr_en_group3;wr_en_cout1 <= wr_en_group2;
							wr_en_aout1 <= '0';wr_en_aout2 <= '0';wr_en_ain <= '0';wr_en_cin <= '0';
							wr_en_bout1 <= '0';wr_en_bout2 <= '0';wr_en_bin <= '0';
							wr_en_dout1 <= '0';wr_en_dout2 <= '0';wr_en_din <= '0';
		when "0011"|"0111"|"1011"|"1111" => data <= data_out ; wr_en_dout2 <= wr_en_group3;wr_en_dout1 <= wr_en_group2;
							wr_en_aout1 <= '0';wr_en_aout2 <= '0';wr_en_ain <= '0';wr_en_din <= '0';
							wr_en_bout1 <= '0';wr_en_bout2 <= '0';wr_en_bin <= '0';
							wr_en_cout1 <= '0';wr_en_cout2 <= '0';wr_en_cin <= '0';
		when others => data <= (others=>'0') ;
	end case;
when others=>	wr_en_aout1 <= '0';wr_en_aout2 <= '0';wr_en_ain <= '0';
				wr_en_bout1 <= '0';wr_en_bout2 <= '0';wr_en_bin <= '0';
				wr_en_cout1 <= '0';wr_en_cout2 <= '0';wr_en_cin <= '0';
				wr_en_dout1 <= '0';wr_en_dout2 <= '0';wr_en_din <= '0';
end case;
end if;
end process;

PROCESS(clk)
begin
if rst_n='0' then
	current_channel <= "0000";
elsif(rising_edge(clk))then
	if finish='1' then
		if rel_addr=matrix2_out then
			current_channel <= current_channel + '1';
			if current_channel=out_channel then
				current_channel <= "0000";
				layer_done <= '1';
			else layer_done <= '0';
			end if;
		end if;
	end if;
end if;
end process;

process(clk)
begin
if rst_n='0' then
	rel_addr <= "0000000000";
elsif(rising_edge(clk))then
		if(finish='1')then
			if (rel_addr /= matrix2_out) then
				rel_addr <= rel_addr + '1';
			else rel_addr <= "0000000001";
			end if;
		end if;
end if;
end process;

process(layer)
begin
case(layer) is
when "0001"|"0010" => matrix2_out <= "1100001111";--783
when "0011"|"0100"|"0101" => matrix2_out <= "0011000011";--195
when "0110"|"0111" => matrix2_out <= "0000110000";--48
when others => matrix2_out <= (others=>'0');
end case;
end process;

process(layer)
begin
case(layer) is
when "0001" => out_channel <= "0000";--1
when "0010"|"0011" => out_channel <= "0011";--4
when "0100"|"0101"|"0110" => out_channel <= "0111";--8
when "0111" => out_channel <= "1111";--16
when others => out_channel <= (others=>'0');
end case;
end process;

process(layer)
begin
case(layer) is
when "0001"|"0010"|"0011" => start_wr_addr <= (others=>'0');
when "0100"|"0101"|"0110" => 
	case(current_channel) is
		when "0000"|"0001"|"0010"|"0011" => start_wr_addr <= (others=>'0');
		when "0100"|"0101"|"0110"|"0111" => start_wr_addr <= "0110001000"; -- 392
		when others => start_wr_addr <= (others=>'0') ;
	end case;
when "0111" => 
	case(current_channel) is
		when "0000"|"0001"|"0010"|"0011" => start_wr_addr <= (others=>'0');
		when "0100"|"0101"|"0110"|"0111" => start_wr_addr <= "0011000100"; -- 196
		when "1000"|"1001"|"1010"|"1011" => start_wr_addr <= "0110001000"; -- 392
		when "1100"|"1101"|"1110"|"1111" => start_wr_addr <= "1001001100"; -- 588
		when others => start_wr_addr <= (others=>'0') ;
	end case;
when others => start_wr_addr <= (others=>'0');
end case;
end process;
wr_addr <= start_wr_addr + rel_addr - '1';
wr_data <= data;
end behav;



